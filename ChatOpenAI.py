import os
import requests

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Key ‡πÅ‡∏•‡∏∞ Endpoint ‡∏Ç‡∏≠‡∏á Azure OpenAI
API_KEY = ""
ENDPOINT = ""

headers = {
    "Content-Type": "application/json",
    "api-key": API_KEY
}

# ‡∏™‡∏£‡πâ‡∏≤‡∏á context memory ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
messages = [
    {"role": "system", "content": "You are a helpful assistant assisting users with travel recommendations."}
]

def chat_with_openai(user_input):
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡∏á‡πÉ‡∏ô memory
    messages.append({"role": "user", "content": user_input})

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á payload ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
    payload = {
        "messages": messages,
        "max_tokens": 200,  # ‡πÉ‡∏´‡πâ AI ‡∏ï‡∏≠‡∏ö‡∏¢‡∏≤‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
        "temperature": 0.7
    }

    response = requests.post(ENDPOINT, headers=headers, json=payload)

    if response.status_code == 200:
        result = response.json()
        ai_response = result["choices"][0]["message"]["content"]
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á Assistant ‡∏•‡∏á‡πÉ‡∏ô memory
        messages.append({"role": "assistant", "content": ai_response})

        # ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á messages ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà 10 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
        if len(messages) > 20:  
            messages.pop(1)  # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏Å (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô system message)

        return ai_response
    else:
        return f"Error: {response.status_code} - {response.text}"

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Loop ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö input ‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
while True:
    user_message = input("User: ")
    if user_message.lower() == "exit":
        print("Ending chat session. Goodbye! üëã")
        break

    response = chat_with_openai(user_message)
    print(f"Assistant: {response}\n")
